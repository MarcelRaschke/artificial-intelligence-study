# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13UjvONTN9k0vlAyMqDnqfhJnzuUvW5uM
"""

# Lab 4 Multi-variable linear regression
import tensorflow as tf
import matplotlib.pyplot as plt
tf.set_random_seed(777)  # for reproducibility

#shape(5, 3): y축의 갯수 5, y축당 각X축의 건수3
x_data = [[73., 80., 75.],
          [93., 88., 93.],
          [89., 91., 90.],
          [96., 98., 100.],
          [73., 66., 70.]]
#shape(5,1)
y_data = [[152.],
          [185.],
          [180.],
          [196.],
          [142.]]
#W => (5,3)(x,x)=(5,1), (x,x)=>(3,1)

# placeholders for a tensor that will be always fed.
X = tf.placeholder(tf.float32, shape=[None, 3])
Y = tf.placeholder(tf.float32, shape=[None, 1])

W = tf.Variable(tf.random_normal([3, 1]), name='weight')
b = tf.Variable(tf.random_normal([1]), name='bias')

# Hypothesis, matmul(matrix multiplication)
hypothesis = tf.matmul(X, W) + b

# Simplified cost/loss function
cost = tf.reduce_mean(tf.square(hypothesis - Y))

# Minimize
optimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)
train = optimizer.minimize(cost)

# Launch the graph in a session.
sess = tf.Session()
# Initializes global variables in the graph.
sess.run(tf.global_variables_initializer())

cost_val_arr = []
step_arr = []
for step in range(2001):
    cost_val, hy_val, _, w_val = sess.run(
        [cost, hypothesis, train, W], feed_dict={X: x_data, Y: y_data})
    if step % 100 == 0:
        cost_val_arr.append(cost_val);
        step_arr.append(step);
        print(step, "Cost: ", cost_val, "\nPrediction:\n", hy_val, "\nWeight:", w_val)

plt.plot(cost_val_arr, "r+", linewidth=0.01, label="cost_val") #r+ :Red + image
plt.plot(step_arr, "b+", linewidth=0.05, label="step") #b+ :Blue + image

plt.ylim([0, 30])
plt.legend(loc='upper right')
plt.xlabel('epoch')
plt.ylabel('val')
#plt.show()